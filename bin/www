
/**
 * Module dependencies.
 */
 require('dotenv').config({path: '.env'});
 require('../src/models/index.model').connect();
 if(process.env.CLUSTER === 'yes') {
 
   const cluster = require('cluster');
   const numCPUs = require('os').cpus().length;
 
   if (cluster.isMaster) {
     console.log('Starting app in cluster mode with '+numCPUs+ ' workers');
     console.log(`Master ${process.pid} is running`);
     for (let i = 0; i < numCPUs; i++) {
       cluster.fork();
     }
 
     cluster.on('exit', (worker, code, signal) => {
             console.log(`worker ${worker.process.pid} died with code: ${code} and signal: ${signal}`);
             console.log("starting new worker");
             cluster.fork();
         });
 
     // eslint-disable-next-line prettier/prettier
     return;
   }
   // else it's a worker. continue.
   console.log(`Worker ${process.pid} started`);
 
 }
 else {
   console.log('Starting app in non-cluster mode. (To start in cluster mode, pass CLUSTER=yes in config file)');
 }
 
 const app = require('../src/app');
 const http = require('http');
 
 /**
  * Get port from environment and store in Express.
  */
 
 const port = normalizePort(process.env.PORT || '4000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 const server = http.createServer(app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   const port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   const bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       throw new Error(bind + ' requires elevated privileges');
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       throw new Error(bind + ' is already in use');
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   const addr = server.address();
   const bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   console.log('Listening on ' + bind);
 }
 